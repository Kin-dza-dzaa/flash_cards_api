// Code generated by mockery v2.20.0. DO NOT EDIT.

package repomock

import (
	"context"
	
	entity "github.com/Kin-dza-dzaa/flash_cards_api/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// TransRepo is an autogenerated mock type for the TransRepo type
type TransRepo struct {
	mock.Mock
}

// Translate provides a mock function with given fields: ctx, word
func (_m *TransRepo) Translate(ctx context.Context, word string) (entity.WordTrans, error) {
	ret := _m.Called(ctx, word)

	var r0 entity.WordTrans
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.WordTrans, error)); ok {
		return rf(ctx, word)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.WordTrans); ok {
		r0 = rf(ctx, word)
	} else {
		r0 = ret.Get(0).(entity.WordTrans)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, word)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTransRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransRepo creates a new instance of TransRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransRepo(t mockConstructorTestingTNewTransRepo) *TransRepo {
	mock := &TransRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}