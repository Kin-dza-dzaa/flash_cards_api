// Code generated by mockery v2.20.0. DO NOT EDIT.

package wordrepomock

import (
	entity "github.com/Kin-dza-dzaa/flash_cards_api/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// Translator is an autogenerated mock type for the Translator type
type Translator struct {
	mock.Mock
}

// Translate provides a mock function with given fields: word
func (_m *Translator) Translate(word string) (entity.WordTrans, error) {
	ret := _m.Called(word)

	var r0 entity.WordTrans
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.WordTrans, error)); ok {
		return rf(word)
	}
	if rf, ok := ret.Get(0).(func(string) entity.WordTrans); ok {
		r0 = rf(word)
	} else {
		r0 = ret.Get(0).(entity.WordTrans)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(word)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTranslator interface {
	mock.TestingT
	Cleanup(func())
}

// NewTranslator creates a new instance of Translator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTranslator(t mockConstructorTestingTNewTranslator) *Translator {
	mock := &Translator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
